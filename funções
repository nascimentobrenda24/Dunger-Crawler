#define TAMANHO_MAPA 10
#define TAMANHO_MAPA2 20
#define TAMANHO_MAPA3 40
#define NUM_OBSTACULOS 50
#define NUM_OBSTACULOS_FASE3 250
#define POSICAO_INICIAL_V_X 13
#define POSICAO_INICIAL_V_Y 20

int posEspinhoX3[NUM_OBSTACULOS_FASE3];
int posEspinhoY3[NUM_OBSTACULOS_FASE3];


int ehObstaculo(int x, int y, int obstaculosX[], int obstaculosY[], int numObstaculos);

int ehPosicaoProibida(int x, int y) {
    // Adicione todas as posições proibidas aqui
    if ((x == 4 && y == 6) || (x == 17 && y == 3) || (x == 1 && y == 18)) {
        return 1;
    }
    return 0;
}

int dentroLimites(int x, int y, int tamanhoMapa) {
    return x >= 0 && x < tamanhoMapa && y >= 0 && y < tamanhoMapa;
}

int ehObstaculo(int x, int y, int obstaculosX[], int obstaculosY[], int numObstaculos) {
    for (int i = 0; i < numObstaculos; i++) {
        if (x == obstaculosX[i] && y == obstaculosY[i]) {
            return 1;
        }
    }
    return 0;
}

void moverX(int *posX, int *posY, char mapa[][TAMANHO_MAPA]) { // Alteração aqui
    int deltaX, deltaY;
    do {
        deltaX = rand() % 3 - 1;
        deltaY = rand() % 3 - 1;
    } while (!dentroLimites(*posX + deltaX, *posY + deltaY, TAMANHO_MAPA) || mapa[*posX + deltaX][*posY + deltaY] == '*' || mapa[*posX + deltaX][*posY + deltaY] == '#' || mapa[*posX + deltaX][*posY + deltaY] == 'D' || mapa[*posX + deltaX][*posY + deltaY] == '@'|| mapa[*posX + deltaX][*posY + deltaY] == '=');

    mapa[*posX][*posY] = ' ';
    *posX += deltaX;
    *posY += deltaY;
    mapa[*posX][*posY] = 'X';
}

void moverX2(int *posX, int *posY, char mapa[][TAMANHO_MAPA2]) { 
    int deltaX, deltaY;
    do {
        deltaX = rand() % 3 - 1;
        deltaY = rand() % 3 - 1;
    } while (!dentroLimites(*posX + deltaX, *posY + deltaY, TAMANHO_MAPA2) || mapa[*posX + deltaX][*posY + deltaY] == '*' || mapa[*posX + deltaX][*posY + deltaY] == '#' || mapa[*posX + deltaX][*posY + deltaY] == 'D' || mapa[*posX + deltaX][*posY + deltaY] == '@'|| mapa[*posX + deltaX][*posY + deltaY] == '=');

    mapa[*posX][*posY] = ' ';
    *posX += deltaX;
    *posY += deltaY;
    mapa[*posX][*posY] = 'X';
}
    
void moverX3(int *posX, int *posY, char mapa[][TAMANHO_MAPA3]) { // Alteração aqui
    int deltaX, deltaY;
    do {
        deltaX = rand() % 3 - 1;
        deltaY = rand() % 3 - 1;
    } while (!dentroLimites(*posX + deltaX, *posY + deltaY, TAMANHO_MAPA3) || mapa[*posX + deltaX][*posY + deltaY] == '*' || mapa[*posX + deltaX][*posY + deltaY] == '#' ||  mapa[*posX + deltaX][*posY + deltaY] == 'V' ||  mapa[*posX + deltaX][*posY + deltaY] == '>'   || mapa[*posX + deltaX][*posY + deltaY] == 'D' || mapa[*posX + deltaX][*posY + deltaY] == '@'|| mapa[*posX + deltaX][*posY + deltaY] == '=' || mapa[*posX + deltaX][*posY + deltaY] == '<');

    mapa[*posX][*posY] = ' ';
    *posX += deltaX;
    *posY += deltaY;
    mapa[*posX][*posY] = 'X';
}
void moverAnd(int *posX, int *posY, char mapa[][TAMANHO_MAPA3], char movimento) {
    int deltaX = 0, deltaY = 0;
    
    // Definir o movimento baseado na tecla pressionada
    if (movimento == 'w') {
        deltaX = -1;
    } else if (movimento == 'a') {
        deltaY = -1;
    } else if (movimento == 's') {
        deltaX = 1;
    } else if (movimento == 'd') {
        deltaY = 1;
    }

    // Verificar se o próximo movimento é válido
    if (dentroLimites(*posX + deltaX, *posY + deltaY, TAMANHO_MAPA3) && mapa[*posX + deltaX][*posY + deltaY] != '*' && mapa[*posX + deltaX][*posY + deltaY] != 'D') {
        mapa[*posX][*posY] = ' '; // Limpar a posição atual
        *posX += deltaX; // Atualizar a posição em X
        *posY += deltaY; // Atualizar a posição em Y
        mapa[*posX][*posY] = '&'; // Atualizar a posição no mapa
    } else if (mapa[*posX + deltaX][*posY + deltaY] == '#') {
        // Se a próxima posição for um espinho, apenas retorne à posição inicial
        *posX = POSICAO_INICIAL_V_X;
        *posY = POSICAO_INICIAL_V_Y;
        
        
    }
}

void moverV(int* posVX, int* posVY, int posAndX, int posAndY, char mapa[TAMANHO_MAPA3][TAMANHO_MAPA3], int espinhosX[], int espinhosY[], int numEspinhos) {
    int novaPosVX = *posVX;
    int novaPosVY = *posVY;
    int movimentoX = (posAndX > *posVX) ? 1 : (posAndX < *posVX) ? -1 : 0;
    int movimentoY = (posAndY > *posVY) ? 1 : (posAndY < *posVY) ? -1 : 0;

    // Primeiro tenta mover na direção X
    if (movimentoX != 0 && dentroLimites(*posVX + movimentoX, *posVY, TAMANHO_MAPA3) && mapa[*posVX + movimentoX][*posVY] != '*' && mapa[*posVX + movimentoX][*posVY] != 'X' && mapa[*posVX + movimentoX][*posVY] != '<' && mapa[*posVX + movimentoX][*posVY] != 'O' && mapa[*posVX + movimentoX][*posVY] != 'D' && mapa[*posVX + movimentoX][*posVY] != '@' && mapa[*posVX + movimentoX][*posVY] != '=') {
        novaPosVX += movimentoX;
    } else if (movimentoY != 0 && dentroLimites(*posVX, *posVY + movimentoY, TAMANHO_MAPA3) && mapa[*posVX][*posVY + movimentoY] != '*' && mapa[*posVX][*posVY + movimentoY] != 'X' && mapa[*posVX + movimentoX][*posVY] != '<' && mapa[*posVX + movimentoX][*posVY] != 'O' && mapa[*posVX + movimentoX][*posVY] != 'D' && mapa[*posVX + movimentoX][*posVY] != '@' && mapa[*posVX + movimentoX][*posVY] != '=') {
        novaPosVY += movimentoY;
    } else {
        // Se não puder mover na direção principal, tenta mover em direções alternativas
        if (movimentoX != 0 && dentroLimites(*posVX, *posVY + movimentoY, TAMANHO_MAPA3) && mapa[*posVX][*posVY + movimentoY] != '*' && mapa[*posVX][*posVY + movimentoY] != 'X' && mapa[*posVX + movimentoX][*posVY] != '<' && mapa[*posVX + movimentoX][*posVY] != 'O' && mapa[*posVX + movimentoX][*posVY] != 'D' && mapa[*posVX + movimentoX][*posVY] != '@' && mapa[*posVX + movimentoX][*posVY] != '=' ) {
            novaPosVY += movimentoY;
        } else if (movimentoY != 0 && dentroLimites(*posVX + movimentoX, *posVY, TAMANHO_MAPA3) && mapa[*posVX + movimentoX][*posVY] != '*' && mapa[*posVX + movimentoX][*posVY] != 'X' && mapa[*posVX + movimentoX][*posVY] != '<' && mapa[*posVX + movimentoX][*posVY] != 'O' && mapa[*posVX + movimentoX][*posVY] != 'D' && mapa[*posVX + movimentoX][*posVY] != '@' && mapa[*posVX + movimentoX][*posVY] != '=') {
            novaPosVX += movimentoX;
        }
        if (mapa[*posVX + movimentoX][*posVY + movimentoY] == '<' || mapa[*posVX + movimentoX][*posVY + movimentoY] == 'D' || mapa[*posVX + movimentoX][*posVY + movimentoY] == '@' || mapa[*posVX + movimentoX][*posVY + movimentoY] == 'O' || mapa[*posVX + movimentoX][*posVY + movimentoY] == '=') {
        // Se o próximo movimento colidir com o portal, não realiza o movimento
        return;
    }
    }

    // Verifica colisão com espinhos
    if (ehObstaculo(novaPosVX, novaPosVY, espinhosX, espinhosY, numEspinhos)) {
        // Se houver colisão, tenta mover em outra direção

        // Primeiro tenta mover na direção Y
        if (movimentoY != 0 && dentroLimites(*posVX, *posVY + movimentoY, TAMANHO_MAPA3) && mapa[*posVX][*posVY + movimentoY] != '*' && mapa[*posVX][*posVY + movimentoY] != 'X' && mapa[*posVX + movimentoX][*posVY] != '<' && mapa[*posVX + movimentoX][*posVY] != 'O' && mapa[*posVX + movimentoX][*posVY] != 'D' && mapa[*posVX + movimentoX][*posVY] != '@' && mapa[*posVX + movimentoX][*posVY] != '=') {
            novaPosVY += movimentoY;
        } else if (movimentoX != 0 && dentroLimites(*posVX + movimentoX, *posVY, TAMANHO_MAPA3) && mapa[*posVX + movimentoX][*posVY] != '*' && mapa[*posVX + movimentoX][*posVY] != 'X' && mapa[*posVX + movimentoX][*posVY] != '<' && mapa[*posVX + movimentoX][*posVY] != 'O' && mapa[*posVX + movimentoX][*posVY] != 'D' && mapa[*posVX + movimentoX][*posVY] != '@' && mapa[*posVX + movimentoX][*posVY] != '=') {
            novaPosVX += movimentoX;
        }

        // Se ainda houver colisão, informa e não realiza o movimento
        if (ehObstaculo(novaPosVX, novaPosVY, espinhosX, espinhosY, numEspinhos)) {
            return;
        }
    }

    mapa[*posVX][*posVY] = ' ';  // Limpa a posição antiga
    *posVX = novaPosVX;
    *posVY = novaPosVY;
    mapa[*posVX][*posVY] = 'V';  // Define a nova posição
}
